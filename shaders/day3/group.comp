#version 460
#extension GL_EXT_debug_printf : enable

layout(local_size_x = 64) in;


layout(std430, binding = 0) buffer InputLines {
    int lines[];
};
layout(std430, binding = 1) buffer OutputPriorities {
    int priorities[];
};

shared uint priority_counts_1[53];
shared uint priority_counts_2[53];
shared uint priority_counts_3[53];

void main() {

    uint GROUP_SIZE = gl_WorkGroupSize.x; // data size of a full backpack
    uint DATA_SIZE = 3 * GROUP_SIZE; // group is 3 elves

    uint bag_1 = gl_WorkGroupID.x * DATA_SIZE + gl_LocalInvocationID.x;
    uint bag_2 = bag_1 + GROUP_SIZE;
    uint bag_3 = bag_2 + GROUP_SIZE;
    uint priority_idx = gl_WorkGroupID.x;

    // make sure this memory is initialized
    priority_counts_1[gl_LocalInvocationID.x % 53] = 0;
    priority_counts_2[gl_LocalInvocationID.x % 53] = 0;
    priority_counts_3[gl_LocalInvocationID.x % 53] = 0;

    barrier();

    atomicAdd(priority_counts_1[lines[bag_1]], 1);
    atomicAdd(priority_counts_2[lines[bag_2]], 1);
    atomicAdd(priority_counts_3[lines[bag_3]], 1);

    barrier();

    // due to the problem statement, there is only 1 element
    // betwen priority_counts_1, 2, and 3 that is
    // non-zero in both (other than the 0 index)
    // since we have 64 threads and 52 elements each thread
    // checks 1 spots with some redundant work
    uint check_idx = (gl_LocalInvocationID.x % 52) + 1;

    if (priority_counts_1[check_idx] > 0 && priority_counts_2[check_idx] > 0 && priority_counts_3[check_idx] > 0) {
        priorities[priority_idx] = int(check_idx);
    }
}